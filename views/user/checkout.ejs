<%- include("../../views/partials/user/header") %>


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background-color: #eef1f6;
            font-family: 'Segoe UI', Roboto, sans-serif;
        }

        .checkout-container {
            padding: 2rem 1rem;
        }

        .section-title {
            font-weight: 700;
            font-size: 1.4rem;
            color: #2c3e50;
        }

        .address-card {
            border: none;
            border-radius: 10px;
            padding: 1.25rem;
            margin-bottom: 1.2rem;
            background-color: #ffffff;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
            transition: all 0.2s ease;
            position: relative;
        }

        .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
        }

        .form-check-label {
            cursor: pointer;
            display: block;
        }

        .address-card input[type="radio"]:checked+label {
            border-left: 4px solid #0d6efd;
            padding-left: 14px;
            background-color: #f0f8ff;
        }

        .btn-edit-address {
            position: absolute;
            top: 12px;
            right: 12px;
            font-size: 0.85rem;
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }

        .btn-add-address {
            margin-top: 1rem;
            font-weight: 500;
            background-color: #0d6efd;
            color: #fff;
            border: none;
            padding: 0.6rem 1rem;
            border-radius: 6px;
        }

        .btn-add-address:hover {
            background-color: #084298;
        }

        .product-summary-card {
            background-color: #fff;
            border-radius: 10px;
            padding: 1rem;
            display: flex;
            align-items: center;
            box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
        }

        .product-summary-card img {
            width: 75px;
            height: 75px;
            border-radius: 6px;
            margin-right: 1rem;
            border: 1px solid #ddd;
        }

        .product-summary-card h6 {
            margin: 0;
            font-weight: 600;
            color: #2f3640;
        }

        .total-summary {
            background: linear-gradient(135deg, #ffffff, #ffffff);
            border-radius: 12px;
            padding: 1.8rem 2rem;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

        }

        .total-summary h5 {
            font-weight: 700;
            font-size: 1.6rem;
            margin-bottom: 1rem;

            letter-spacing: 0.03em;
            border-bottom: 2px solid #90caf9;
            padding-bottom: 0.3rem;
        }

        .total-summary p {
            margin-bottom: 0.75rem;
            font-size: 1rem;
            display: flex;
            justify-content: space-between;
            font-weight: 600;
            border-bottom: 1px solid #cfd8dc;
            padding-bottom: 0.3rem;
        }



        .total-summary p .text-danger {
            font-weight: 700;
            color: #c62828 !important;
        }

        .total-summary hr {
            margin: 1.5rem 0;
            border-color: #bbdefb;
            border-style: dashed;
        }

        .coupon-section {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .coupon-section h3 {
            color: #495057;
            margin-bottom: 0.75rem;
        }

        #couponCode {
            border-radius: 6px;
            border: 1.5px solid #64b5f6;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        #couponCode:focus {
            border-color: #1976d2;
            box-shadow: 0 0 6px #1976d2;
            outline: none;
        }

        #applyCouponBtn {
            border-radius: 6px;
            padding: 0.375rem 1rem;
            font-weight: 600;
            border: none;
            transition: background-color 0.3s ease;
        }

        #couponFeedback {
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .view-coupons-link {
            color: #0d6efd;
            text-decoration: none;
            font-size: 0.9rem;
            margin-top: 0.5rem;
            display: inline-block;
        }

        .view-coupons-link:hover {
            text-decoration: underline;
            color: #084298;
        }

        .applied-coupon-section {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 6px;
            padding: 0.75rem;
            margin-top: 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .applied-coupon-text {
            color: #155724;
            margin: 0;
            font-weight: 500;
        }

        .btn-remove-coupon {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            transition: background-color 0.3s ease;
        }

        .btn-remove-coupon:hover {
            background-color: #c82333;
        }

        .total-summary h5.total-amount {
            font-size: 1.8rem;
            color: #2e7d32;
            margin-top: 1rem;
            font-weight: 800;
            text-align: right;
            letter-spacing: 0.05em;
        }


        .btn-place-order {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            font-weight: 600;
            background-color: #198754;
            color: #fff;
            border: none;
            border-radius: 6px;
        }

        .btn-place-order:hover {
            background-color: #145c32;
        }

        .product-list-wrapper {
            max-height: 320px;
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .product-list-wrapper::-webkit-scrollbar {
            width: 6px;
        }

        .product-list-wrapper::-webkit-scrollbar-thumb {
            background-color: #adb5bd;
            border-radius: 10px;
        }

        .product-list-wrapper::-webkit-scrollbar-thumb:hover {
            background-color: #6c757d;
        }

        .modal-content {
            border-radius: 10px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .modal-footer {
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }

        .form-control {
            border-radius: 6px;
        }

        .form-check-input:checked {
            background-color: #198754;
            border-color: #198754;
        }

        .payment-method-section {
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            border-radius: 8px;
        }
    </style>


    <div class="container checkout-container">
        <div class="row">
            <!-- Address Section -->
            <div class="col-md-6 mb-4">
                <h4 class="section-title mb-3">Select Delivery Address</h4>
                <% userAddresses.forEach((address, index)=> { %>
                    <div class="address-card">
                        <button class="btn btn-sm btn-outline-secondary btn-edit-address"
                            onclick="openEditModal('<%= address._id %>')"> Edit</button>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="selectedAddress" id="address<%= index %>"
                                value="<%= address._id %>" <%=address.isDefault ? 'checked' : '' %>>
                            <label class="form-check-label" for="address<%= index %>">
                                <strong>
                                    <%= address.name %>
                                </strong><br>
                                <%= address.streetAddress %>, <%= address.town %>, <%= address.city %>, <%=
                                                address.state %>, <%= address.country %> - <%= address.pincode %><br>
                                                        📞 <%= address.phone %>
                            </label>
                        </div>
                    </div>
                    <% }) %>
                        <button class="btn btn-outline-success btn-add-address w-100" onclick="openAddModal()">➕ Add New
                            Address</button>
            </div>

            <!-- Order Summary Section -->
            <div class="col-md-6">
                <h4 class="section-title mb-3">Order Summary</h4>

                <div class="product-list-wrapper mb-3">
                    <% checkoutItems.forEach(item=> { %>
                        <div class="product-summary-card">
                            <img src="<%= item.image %>" alt="<%= item.name %>">
                            <div>
                                <h6>
                                    <%= item.name %>
                                </h6>
                                <p class="mb-1">Qty: <strong>
                                        <%= item.quantity %>
                                    </strong></p>
                                <p class="mb-1">Price: ₹<%= item.price.toFixed(2) %>
                                </p>
                                <% if (item.discount) { %>
                                    <p class="mb-1 text-danger">Discount: <%= item.discount %>%</p>
                                    <p><strong>Item Total:</strong> ₹<s>
                                            <%= (item.price * item.quantity).toFixed(2) %>
                                        </s> → ₹<%= ((item.price * item.quantity) * (1 - item.discount /
                                            100)).toFixed(2) %>
                                    </p>
                                    <% } else { %>
                                        <p><strong>Item Total:</strong> ₹<%= (item.price * item.quantity).toFixed(2) %>
                                        </p>
                                        <% } %>
                            </div>
                        </div>
                        <% }) %>
                </div>

                <div class="total-summary">
                    <div class="coupon-section">
                        <h3 class="h5 mb-3">Apply Coupon</h3>
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code">
                            <button class="btn btn-primary" id="applyCouponBtn" type="button">Apply</button>
                        </div>
                        <small id="couponFeedback" class="d-none"></small>
                        <a href="/coupons" class="view-coupons-link">View All Available Coupons</a>
                        
                        <!-- Applied Coupon Display -->
                        <div id="appliedCouponSection" class="applied-coupon-section" style="display: none;">
                            <p class="applied-coupon-text">
                                <strong>Applied Coupon:</strong> <span id="appliedCouponName"></span>   
                            </p>
                           
                            <button class="btn btn-remove-coupon" onclick="removeCoupon()">Remove</button>
                        </div>
                    </div>
                    <h5 class="mb-3">Price Details</h5>
                    <p><strong>Total Items:</strong>
                        <%= totalItems %>
                    </p>
                    <p><strong>Total MRP:</strong> ₹<%= totalMRP.toFixed(2) %>
                    </p>
                    <p><strong>Discount on MRP:</strong> <span class="text-danger">-₹<%= totalDiscount.toFixed(2) %>
                                </span></p>
                    <p id="couponDiscountRow" style="display: none;"><strong>Coupon Discount:</strong> <span class="text-success" id="couponDiscountAmount">-₹0.00</span></p>            
                    <p><strong>Shipping Charges:</strong> ₹<%= shippingCharges.toFixed(2) %>
                    </p>
                    <hr>
                  
                    <div class="payment-method-section p-3 mb-3 border rounded bg-light">
                        <h5 class="section-title mb-3">Choose Payment Method</h5>

                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="payment" id="paymentCOD" value="cod">
                            <label class="form-check-label" for="paymentCOD">Cash on Delivery</label>
                        </div>

                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="payment" id="paymentOnline"
                                value="razorpay">
                            <label class="form-check-label" for="paymentOnline">Online Payment (UPI/Card)</label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="payment" id="paymentWallet"
                                value="wallet">
                            <label class="form-check-label" for="paymentWallet">Wallet Payment (Balance: ₹<%= wallet.balance.toFixed(2) %> )</label>
                        </div>
                    </div>


                    <h5><strong>Total Amount:</strong> ₹<span id="subtotal"><%= finalPrice.toFixed(2) %></span>
                    </h5>

                    <button class="btn btn-success btn-place-order w-100 mt-3"> Place Order</button>
                </div>

            </div>
        </div>
    </div>



<!-- Modal -->
<div class="modal fade" id="walletPaymentModal" tabindex="-1" aria-labelledby="walletPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content shadow-lg border-0 rounded">
        <div class="modal-header bg-primary text-white rounded-top">
          <h5 class="modal-title" id="walletPaymentModalLabel">Wallet Payment</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <strong>Available Balance:</strong>
              <span class="text-success fw-bold">₹<span id="walletBalance"><%= wallet.balance.toFixed(2) %></span></span>
            </div>
            <div class="d-flex justify-content-between align-items-center">
              <strong>Payable Amount:</strong>
              <span class="text-danger fw-bold">₹<span id="payableAmount">0.00</span></span>
            </div>
          </div>
          <div id="insufficientFunds" style="display: none;">
            <div class="alert alert-warning text-center rounded">
              <strong>⚠️ Insufficient funds!</strong><br>
              Please add money to your wallet to continue.
            </div>
            <div class="text-center">
              <a href="/wallet#add-money-button" class="btn btn-outline-primary">Add Money</a>
            </div>
          </div>
        </div>
        <div class="modal-footer border-0">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="confirmWalletPayment">Pay Now</button>
        </div>
      </div>
    </div>
  </div>
  

    <!-- Modal for Add/Edit Address -->
    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form id="addressForm">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addressModalLabel">Add / Edit Address</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="addressId" name="addressId" value="">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" name="name" >
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="phone" name="phone" >
                        </div>
                        <div class="mb-3">
                            <label for="streetAddress" class="form-label">Street Address</label>
                            <input type="text" class="form-control" id="streetAddress" name="streetAddress" >
                        </div>
                        <div class="mb-3">
                            <label for="town" class="form-label">Town</label>
                            <input type="text" class="form-control" id="town" name="town" >
                        </div>
                        <div class="mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="city" >
                        </div>
                        <div class="mb-3">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" name="state" >
                        </div>
                        <div class="mb-3">
                            <label for="country" class="form-label">Country</label>
                            <input type="text" class="form-control" id="country" name="country" >
                        </div>
                        <div class="mb-3">
                            <label for="pincode" class="form-label">Pincode</label>
                            <input type="text" class="form-control" id="pincode" name="pincode"  pattern="\d{6}"
                                title="6 digit pincode">
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isDefault" name="isDefault">
                            <label class="form-check-label" for="isDefault">Set as default address</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="saveAddressBtn">Save Address</button>
                    </div>
                </div>
            </form>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>



  


<script>
    // Bootstrap Modal instance
    const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));

    // Store addresses in JS for edit pre-fill
    const addresses = <%- JSON.stringify(userAddresses) %>;

    // Global variables
    let appliedCoupon = null;
    let isProcessingOrder = false;
    let originalFinalPrice = <%= finalPrice %>;

    // Open modal for Add New Address
    function openAddModal() {
        document.getElementById('addressModalLabel').textContent = 'Add New Address';
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value = '';
        addressModal.show();
    }

    // Open modal for Edit Address (fill fields)
    function openEditModal(id) {
        const address = addresses.find(addr => addr._id === id);
        if (!address) return Swal.fire('Error', 'Address not found', 'error');

        document.getElementById('addressModalLabel').textContent = 'Edit Address';
        document.getElementById('addressId').value = address._id;
        document.getElementById('name').value = address.name || '';
        document.getElementById('phone').value = address.phone || '';
        document.getElementById('streetAddress').value = address.streetAddress || '';
        document.getElementById('town').value = address.town || '';
        document.getElementById('city').value = address.city || '';
        document.getElementById('state').value = address.state || '';
        document.getElementById('country').value = address.country || '';
        document.getElementById('pincode').value = address.pincode || '';
        document.getElementById('isDefault').checked = address.isDefault || false;

        addressModal.show();
    }

    // Validate form data
    function validateAddressForm(data) {
        const errors = [];
        
        if (!data.name?.trim()) errors.push('Name is required');
        if (!data.phone?.trim()) errors.push('Phone is required');
        if (!/^\d{10}$/.test(data.phone?.replace(/\D/g, ''))) errors.push('Valid 10-digit phone number required');
        if (!data.streetAddress?.trim()) errors.push('Street address is required');
        if (!data.city?.trim()) errors.push('City is required');
        if (!data.state?.trim()) errors.push('State is required');
        if (!data.country?.trim()) errors.push('Country is required');
        if (!/^\d{6}$/.test(data.pincode)) errors.push('Valid 6-digit pincode required');
        
        return errors;
    }


    // Handle Add/Edit form submit
    document.getElementById('addressForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const submitBtn = document.getElementById('saveAddressBtn');
        const originalText = submitBtn.textContent;

        try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Saving...';

        const id = document.getElementById('addressId').value;
        const data = {
            name: this.name.value.trim(),
            phone: this.phone.value.trim(),
            streetAddress: this.streetAddress.value.trim(),
            town: this.town.value.trim(),
            city: this.city.value.trim(),
            state: this.state.value.trim(),
            country: this.country.value.trim(),
            pincode: this.pincode.value.trim(),
            isDefault: this.isDefault.checked
        };

        // Validate data
        const errors = validateAddressForm(data);
        if (errors.length > 0) {
            throw new Error(errors.join(', '));
        }

        if (id) data.addressId = id;

        const response = await fetch(id ? '/editAddress' : '/addAddress', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to save address');
        }

        const result = await response.json();
        addressModal.hide();

        await Swal.fire({
            icon: 'success',
            title: id ? 'Address updated!' : 'Address added!',
            timer: 1500,
            showConfirmButton: false
        });

        location.reload();

        } catch (error) {
            Swal.fire('Error', error.message, 'error');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }     
    });


    // Check stock availability
    async function checkStockAvailability() {
        const response = await fetch('/check-stock');
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }
        return data.items;
    }

       // Apply coupon functionality
       document.getElementById('applyCouponBtn').addEventListener('click', async function() {
        const couponCode = document.getElementById('couponCode').value.trim();
        const subtotal = parseFloat(document.getElementById('subtotal').textContent);
        const feedback = document.getElementById('couponFeedback');
        const btn = this;
        
        if (!couponCode) {
            showCouponFeedback('Please enter a coupon code', 'danger');
            return;
        }

        try {
            btn.disabled = true;
            btn.textContent = 'Applying...';
            
            const response = await fetch('/apply-coupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode, orderTotal:subtotal })
            });

            const result = await response.json();
            
            if (result.success) {
                appliedCoupon = result.coupon;
                
                // Show success feedback
                const savedAmount = result.discount;
                showCouponFeedback(`Coupon applied! You saved ₹${savedAmount.toFixed(2)}`, 'success');
                
                // Update applied coupon display
                displayAppliedCoupon(result.coupon, result.discount);
                
                // Update price totals
                updatePriceTotals(result.discount);
                
                // Hide coupon input section
                document.getElementById('couponCode').value = '';
                
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            showCouponFeedback(error.message, 'danger');
        } finally {
            btn.disabled = false;
            btn.textContent = 'Apply';
        }
    });

     // Remove coupon functionality
     function removeCoupon() {
        if (!appliedCoupon) return;
        
        // Reset applied coupon
        appliedCoupon = null;
        
        // Hide applied coupon section
        document.getElementById('appliedCouponSection').style.display = 'none';
        
        // Hide coupon discount row
        document.getElementById('couponDiscountRow').style.display = 'none';
        
        const subtotalElem = document.getElementById('subtotal');
        if (!isNaN(originalFinalPrice)) {
            subtotalElem.textContent = originalFinalPrice.toFixed(2);
        }
       
        // Clear any feedback
        document.getElementById('couponFeedback').classList.add('d-none');
        
        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Coupon Removed',
            text: 'Coupon has been removed successfully',
            timer: 1500,
            showConfirmButton: false
        });
    }

     // Helper function to show coupon feedback
     function showCouponFeedback(message, type) {
        const feedback = document.getElementById('couponFeedback');
        feedback.textContent = message;
        feedback.className = `text-${type} mt-2`;
        feedback.classList.remove('d-none');
    }

    // Helper function to display applied coupon
    function displayAppliedCoupon(coupon, discount) {
        document.getElementById('appliedCouponName').textContent = coupon.code;
        document.getElementById('appliedCouponSection').style.display = 'flex';
    }

       // Helper function to update price totals
    function updatePriceTotals(discountPercent) {
        const subtotalElem = document.getElementById('subtotal');
        const couponDiscountRow = document.getElementById('couponDiscountRow');
        const couponDiscountAmount = document.getElementById('couponDiscountAmount');

        // Parse subtotal value (cleaning ₹, commas, etc.)
        const originalSubtotal = parseFloat(subtotalElem.textContent.replace(/[^0-9.]/g, ''));

        if (isNaN(originalSubtotal)) {
            console.error('Invalid subtotal value:', subtotalElem.textContent);
            return;
        }

        // Calculate discount amount based on percentage
        const discountAmount = discountPercent;

        // Show and update the coupon discount row
        couponDiscountRow.style.display = 'flex';
        couponDiscountAmount.textContent = `-₹${discountAmount.toFixed(2)}`;

        // Calculate and update new final amount
        const newFinalPrice = originalSubtotal - discountAmount;
        subtotalElem.textContent = newFinalPrice.toFixed(2);
    }




        // Order processing functions
async function processCODOrder(orderData) {
    try {
        const response = await fetch('/placeOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData)
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || 'Order placement failed');
        }

        if (result.success) {
            await Swal.fire({
                title: 'Order Placed Successfully!',
                text: `Order ID: ${result.orderId}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            });
            
            window.location.href = '/orders';
        } else {
            throw new Error(result.message || 'Failed to place order');
        }
    } catch (error) {
        throw error;
    }
}

async function processRazorpayOrder(orderData) {
    try {
        const response = await fetch('/create-razorpay-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData)
        });

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message || 'Failed to create payment order');
        }

        const options = {
            key: data.razorpayKeyId,
            amount: data.amount,
            currency: data.currency,
            name: 'Shopnow',
            // image: '/img/pc-logo.png',
            description: 'Purchase Description',
            order_id: data.orderId,
            handler: function (response) {
                verifyPayment(response, orderData);
            },
            prefill: {
                name: data.customerName,
                email: data.customerEmail,
                contact: data.customerPhone
            },
            theme: {
                color: '#F37254'
            },
            modal: {
                ondismiss: function() {
                    isProcessingOrder = false;
                }
            }
        };

        const rzp = new Razorpay(options);

        rzp.on('payment.failed', async function (response) {
            const result = await Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: 'Your payment was not successful. Would you like to try again?',
                showCancelButton: true,
                confirmButtonText: 'Retry',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#d33'
            });

            if (result.isConfirmed) {
                // Retry payment
                processRazorpayOrder(orderData);
            } else {
                // User cancelled retry
                isProcessingOrder = false;
            }
        });

        rzp.open();
    } catch (error) {
        throw error;
    }
}

function processWalletOrder(orderData) {
    const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
    const payableAmount = parseFloat(document.getElementById('subtotal').textContent);
    
    document.getElementById('payableAmount').textContent = payableAmount.toFixed(2);
    
    const walletPaymentModal = new bootstrap.Modal(document.getElementById('walletPaymentModal'));
    const insufficientFunds = document.getElementById('insufficientFunds');
    const confirmWalletPayment = document.getElementById('confirmWalletPayment');
    
    if (walletBalance < payableAmount) {
        insufficientFunds.style.display = 'block';
        confirmWalletPayment.style.display = 'none';
    } else {
        insufficientFunds.style.display = 'none';
        confirmWalletPayment.style.display = 'block';
    }
    
    walletPaymentModal.show();
}



document.getElementById('confirmWalletPayment').addEventListener('click', async () => {
    const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
    const paymentMethod = document.querySelector('input[name="payment"]:checked');

    if (!selectedAddressRadio) {
        await Swal.fire('Select Address', 'Please select a delivery address to proceed.', 'warning');
        return;
    }

    const orderData = {
        addressId: selectedAddressRadio.value,
        paymentMethod: 'wallet',
        couponCode: appliedCoupon ? appliedCoupon.code : null
    };

    try {
        const response = await fetch('/place-wallet-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });

        const data = await response.json();
        if (data.success) {
            Swal.fire({
                title: 'Order Placed Successfully!',
                text: `Order IDs: ${data.orderIds.join(", ")}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'Failed to place order', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while placing the order', 'error');
    }
});


    // Verify Razorpay payment
async function verifyPayment(paymentResponse, orderData) {
    try {
        const response = await fetch('/verify-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                ...paymentResponse,
                orderData
            })
        });

        const result = await response.json();

        if (result.success) {
            await Swal.fire({
                title: 'Payment Successful!',
                text: `Order ID: ${result.orderId}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            });
            
            window.location.href = '/orders';
        } else {
            throw new Error(result.message || 'Payment verification failed');
        }
    } catch (error) {
        await Swal.fire('Payment Error', error.message, 'error');
    } finally {
        isProcessingOrder = false;
    }
}

async function proceedWithOrder() {
    if (isProcessingOrder) return;
    
    const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
    const paymentMethod = document.querySelector('input[name="payment"]:checked');

    if (!selectedAddressRadio) {
        await Swal.fire('Select Address', 'Please select a delivery address to proceed.', 'warning');
        return;
    }

    if (!paymentMethod) {
        await Swal.fire('Select Payment', 'Please select a payment method to proceed.', 'warning');
        return;
    }

    isProcessingOrder = true;
    const orderBtn = document.querySelector('.btn-place-order');
    const originalText = orderBtn.textContent;
    
    try {
        orderBtn.disabled = true;
        orderBtn.textContent = 'Processing...';

        const orderData = {
            addressId: selectedAddressRadio.value,
            paymentMethod: paymentMethod.value,
            couponCode: appliedCoupon?.code || null
        };

        switch (paymentMethod.value) {
            case 'cod':
                await processCODOrder(orderData);
                break;
            case 'razorpay':
                await processRazorpayOrder(orderData);
                break;
            case 'wallet':
                await processWalletOrder(orderData);
                break;
            default:
                throw new Error('Invalid payment method selected');
        }
    } catch (error) {
        await Swal.fire('Error', error.message || 'An error occurred while placing the order', 'error');
        isProcessingOrder = false;
    } finally {
        orderBtn.disabled = false;
        orderBtn.textContent = originalText;
    }
}

// Main order placement event listener
document.querySelector('.btn-place-order').addEventListener('click', async () => {
    try {
        // Check stock availability before proceeding
        const stockStatus = await checkStockAvailability();

        if (stockStatus.length === 0) {
            await Swal.fire({
                title: 'Cart Empty',
                text: 'No items available in stock. Your cart will be cleared.',
                icon: 'error',
                confirmButtonText: 'Go to Shop'
            });
            window.location.href = '/shop';
            return;
        }

        // Check for blocked products
        const blockedProducts = stockStatus.filter(item => item.isBlocked);
        if (blockedProducts.length > 0) {
            await Swal.fire({
                title: 'Products Blocked',
                text: 'Some products in your cart have been blocked by admin. The page will reload to update your cart.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            window.location.reload();
            return;
        }

        // Check for stock changes
        if (stockStatus.some(item => item.stockChanged)) {
            const result = await Swal.fire({
                title: 'Stock Changed',
                text: 'Some items in your cart have limited stock. The quantities have been adjusted.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Continue with Available Stock',
                cancelButtonText: 'Cancel'
            });
            
            if (result.isConfirmed) {
                window.location.reload();
            }
            return;
        }

        await proceedWithOrder();

    } catch (error) {
        console.error('Error:', error);
        await Swal.fire('Error', error.message || 'An error occurred while placing the order', 'error');
    }
});
    
</script>

 <%- include("../../views/partials/user/footer") %>